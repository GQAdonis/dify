x-shared-env: &shared-api-worker-env
  REDIS_HOST: redis
  REDIS_PORT: 6379
  REDIS_PASSWORD: difyai123456
  REDIS_DB: 0
  DB_HOST: db
  DB_PORT: 5432
  DB_USERNAME: postgres
  DB_PASSWORD: difyai123456
  DB_DATABASE: dify
  MIGRATION_ENABLED: "true"
  CONSOLE_API_URL: ${CONSOLE_API_URL:-https://dify.prometheusags.ai/api}
  CONSOLE_WEB_URL: ${CONSOLE_WEB_URL:-https://dify.prometheusags.ai}
  SERVICE_API_URL: ${SERVICE_API_URL:-https://dify.prometheusags.ai/api}
  APP_API_URL: ${APP_API_URL:-https://dify.prometheusags.ai/api}
  APP_WEB_URL: ${APP_WEB_URL:-https://dify.prometheusags.ai}
  FILES_URL: ${FILES_URL:-https://dify.prometheusags.ai}
  OPENDAL_FS_ROOT: ${OPENDAL_FS_ROOT:-storage}
  OPENDAL_SCHEME: ${OPENDAL_SCHEME:-fs}
  CELERY_BROKER_URL: redis://:difyai123456@redis:6379/0
  CELERY_BACKEND: redis
  # Enable at least one authentication method
  ENABLE_EMAIL_PASSWORD_LOGIN: "true"
  ALLOW_REGISTER: "true"
  ALLOW_CREATE_WORKSPACE: "true"
  # Plugin daemon configuration
  PLUGIN_DAEMON_URL: ${PLUGIN_DAEMON_URL:-http://plugin_daemon:5002}
  PLUGIN_DAEMON_PORT: ${PLUGIN_DAEMON_PORT:-5002}
  PLUGIN_DAEMON_KEY: ${PLUGIN_DAEMON_KEY:-lYkiYYT6owG+71oLerGzA7GXCgOT++6ovaezWAjpCjf+Sjc3ZtU+qUEi}
  PLUGIN_DIFY_INNER_API_KEY: ${PLUGIN_DIFY_INNER_API_KEY:-QaHbTe77CtuXmsfyhR7+vRjI/+XbV1AaFy691iy+kGDv2Jvy0/eAh8Y1}
  PLUGIN_DIFY_INNER_API_URL: ${PLUGIN_DIFY_INNER_API_URL:-http://api:5001}
  VECTOR_STORE: qdrant
  QDRANT_URL: ${QDRANT_URL:-http://qdrant:6333}
  QDRANT_API_KEY: ${QDRANT_API_KEY:-difyai123456}
  QDRANT_CLIENT_TIMEOUT: ${QDRANT_CLIENT_TIMEOUT:-20}
  QDRANT_GRPC_ENABLED: ${QDRANT_GRPC_ENABLED:-false}
  QDRANT_GRPC_PORT: ${QDRANT_GRPC_PORT:-6334}
services:
  api:
    image: langgenius/dify-api:1.3.1
    restart: always
    environment:
      <<: *shared-api-worker-env
      MODE: api
      # Plugin-specific configuration for API service
      PLUGIN_REMOTE_INSTALL_HOST: ${EXPOSE_PLUGIN_DEBUGGING_HOST:-localhost}
      PLUGIN_REMOTE_INSTALL_PORT: ${EXPOSE_PLUGIN_DEBUGGING_PORT:-5003}
      PLUGIN_MAX_PACKAGE_SIZE: ${PLUGIN_MAX_PACKAGE_SIZE:-52428800}
      INNER_API_KEY_FOR_PLUGIN: ${PLUGIN_DIFY_INNER_API_KEY:-QaHbTe77CtuXmsfyhR7+vRjI/+XbV1AaFy691iy+kGDv2Jvy0/eAh8Y1}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./volumes/app/storage:/app/api/storage
    networks:
      - traefik_network
      - ssrf_proxy_network
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dify-api.rule=Host(`dify.prometheusags.ai`) && PathPrefix(`/api`)"
      - "traefik.http.middlewares.strip-api-prefix.stripprefix.prefixes=/api"
      - "traefik.http.routers.dify-api.middlewares=strip-api-prefix"
      - "traefik.http.routers.dify-api.entrypoints=websecure"
      - "traefik.http.routers.dify-api.tls.certresolver=myresolver"
      - "traefik.http.services.dify-api.loadbalancer.server.port=5001"
      - "traefik.http.routers.dify-console.rule=Host(`dify.prometheusags.ai`) && PathPrefix(`/console/api`)"
      - "traefik.http.middlewares.strip-console-api-prefix.stripprefix.prefixes=/console/api"
      - "traefik.http.routers.dify-console.middlewares=strip-console-api-prefix"
      - "traefik.http.routers.dify-console.entrypoints=websecure"
      - "traefik.http.routers.dify-console.tls.certresolver=myresolver"
      - "traefik.http.routers.dify-console.service=dify-api"
      - "traefik.http.routers.dify-v1.rule=Host(`dify.prometheusags.ai`) && PathPrefix(`/v1`)"
      - "traefik.http.routers.dify-v1.entrypoints=websecure"
      - "traefik.http.routers.dify-v1.tls.certresolver=myresolver"
      - "traefik.http.routers.dify-v1.service=dify-api"
      - "traefik.http.routers.dify-files.rule=Host(`dify.prometheusags.ai`) && PathPrefix(`/files`)"
      - "traefik.http.routers.dify-files.entrypoints=websecure"
      - "traefik.http.routers.dify-files.tls.certresolver=myresolver"
      - "traefik.http.routers.dify-files.service=dify-api"

  web:
    image: dify-web-fixed:latest
    restart: always
    environment:
      CONSOLE_API_URL: ${CONSOLE_API_URL:-https://dify.prometheusags.ai/api}
      APP_API_URL: ${APP_API_URL:-https://dify.prometheusags.ai/api}
      MARKETPLACE_API_URL: https://marketplace.dify.ai
    depends_on:
      - api
    networks:
      - traefik_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dify-web.rule=Host(`dify.prometheusags.ai`)"
      - "traefik.http.routers.dify-web.entrypoints=websecure"
      - "traefik.http.routers.dify-web.tls.certresolver=myresolver"
      - "traefik.http.services.dify-web.loadbalancer.server.port=3000"
      - "traefik.http.routers.dify-explore.rule=Host(`dify.prometheusags.ai`) && PathPrefix(`/explore`)"
      - "traefik.http.routers.dify-explore.entrypoints=websecure"
      - "traefik.http.routers.dify-explore.tls.certresolver=myresolver"
      - "traefik.http.routers.dify-explore.service=dify-web"

  worker:
    image: langgenius/dify-api:1.3.1
    restart: always
    command: celery -A app.celery worker -P gevent -c 1 --loglevel=INFO
    environment:
      <<: *shared-api-worker-env
      MODE: worker
      # Plugin-specific configuration for worker service
      PLUGIN_MAX_PACKAGE_SIZE: ${PLUGIN_MAX_PACKAGE_SIZE:-52428800}
      INNER_API_KEY_FOR_PLUGIN: ${PLUGIN_DIFY_INNER_API_KEY:-QaHbTe77CtuXmsfyhR7+vRjI/+XbV1AaFy691iy+kGDv2Jvy0/eAh8Y1}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./volumes/app/storage:/app/api/storage
    networks:
      - ssrf_proxy_network
      - default

  db:
    image: postgres:15-alpine
    restart: always
    environment:
      PGUSER: ${PGUSER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-difyai123456}
      POSTGRES_DB: ${POSTGRES_DB:-dify}
      PGDATA: ${PGDATA:-/var/lib/postgresql/data/pgdata}
    command: postgres -c 'max_connections=100'
    volumes:
      - ./volumes/db/data:/var/lib/postgresql/data
    healthcheck:
      test: [ 'CMD', 'pg_isready', '-h', 'db', '-U', '${PGUSER:-postgres}', '-d', '${POSTGRES_DB:-dify}' ]
      interval: 1s
      timeout: 3s
      retries: 60

  redis:
    image: redis:6-alpine
    restart: always
    environment:
      REDISCLI_AUTH: ${REDIS_PASSWORD:-difyai123456}
    volumes:
      - ./volumes/redis/data:/data
    command: redis-server --requirepass ${REDIS_PASSWORD:-difyai123456}
    healthcheck:
      test: [ 'CMD', 'redis-cli', 'ping' ]

  scheduler:
    image: langgenius/dify-api:1.3.1
    restart: always
    command: celery -A app.celery beat --loglevel=INFO
    environment:
      <<: *shared-api-worker-env
      MODE: ""
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./volumes/app/storage:/app/api/storage
    networks:
      - default

  sandbox:
    image: langgenius/dify-sandbox:0.2.11
    restart: always
    environment:
      API_KEY: ${SANDBOX_API_KEY:-dify-sandbox}
      GIN_MODE: ${SANDBOX_GIN_MODE:-release}
      WORKER_TIMEOUT: ${SANDBOX_WORKER_TIMEOUT:-15}
      ENABLE_NETWORK: ${SANDBOX_ENABLE_NETWORK:-true}
      HTTP_PROXY: ${SANDBOX_HTTP_PROXY:-http://ssrf_proxy:3128}
      HTTPS_PROXY: ${SANDBOX_HTTPS_PROXY:-http://ssrf_proxy:3128}
      SANDBOX_PORT: ${SANDBOX_PORT:-8194}
      PIP_MIRROR_URL: ${PIP_MIRROR_URL:-}
    volumes:
      - ./volumes/sandbox/dependencies:/dependencies
      - ./volumes/sandbox/conf:/conf
    healthcheck:
      test: [ 'CMD', 'curl', '-f', 'http://localhost:8194/health' ]
    networks:
      - ssrf_proxy_network

  ssrf_proxy:
    image: ubuntu/squid:latest
    restart: always
    volumes:
      - ./ssrf_proxy/squid.conf.template:/etc/squid/squid.conf.template
      - ./ssrf_proxy/docker-entrypoint.sh:/docker-entrypoint-mount.sh
    entrypoint: [ 'sh', '-c', "cp /docker-entrypoint-mount.sh /docker-entrypoint.sh && sed -i 's/\\r1951530//' /docker-entrypoint.sh && chmod +x /docker-entrypoint.sh && /docker-entrypoint.sh" ]
    environment:
      HTTP_PORT: ${SSRF_HTTP_PORT:-3128}
      COREDUMP_DIR: ${SSRF_COREDUMP_DIR:-/var/spool/squid}
      REVERSE_PROXY_PORT: ${SSRF_REVERSE_PROXY_PORT:-8194}
      SANDBOX_HOST: ${SSRF_SANDBOX_HOST:-sandbox}
      SANDBOX_PORT: ${SANDBOX_PORT:-8194}
    networks:
      - ssrf_proxy_network
      - default

  # The plugin daemon service
  plugin_daemon:
    image: tribehealth/dify-plugin-daemon:05052025
    restart: always
    environment:
      <<: *shared-api-worker-env
      DB_DATABASE: ${DB_PLUGIN_DATABASE:-dify_plugin}
      SERVER_PORT: ${PLUGIN_DAEMON_PORT:-5002}
      SERVER_KEY: ${PLUGIN_DAEMON_KEY:-lYkiYYT6owG+71oLerGzA7GXCgOT++6ovaezWAjpCjf+Sjc3ZtU+qUEi}
      MAX_PLUGIN_PACKAGE_SIZE: ${PLUGIN_MAX_PACKAGE_SIZE:-52428800}
      PPROF_ENABLED: ${PLUGIN_PPROF_ENABLED:-false}
      DIFY_INNER_API_URL: ${PLUGIN_DIFY_INNER_API_URL:-http://api:5001}
      DIFY_INNER_API_KEY: ${PLUGIN_DIFY_INNER_API_KEY:-QaHbTe77CtuXmsfyhR7+vRjI/+XbV1AaFy691iy+kGDv2Jvy0/eAh8Y1}
      PLUGIN_REMOTE_INSTALLING_HOST: ${PLUGIN_DEBUGGING_HOST:-0.0.0.0}
      PLUGIN_REMOTE_INSTALLING_PORT: ${PLUGIN_DEBUGGING_PORT:-5003}
      PLUGIN_WORKING_PATH: ${PLUGIN_WORKING_PATH:-/app/storage/cwd}
      FORCE_VERIFYING_SIGNATURE: ${FORCE_VERIFYING_SIGNATURE:-true}
      PYTHON_ENV_INIT_TIMEOUT: ${PLUGIN_PYTHON_ENV_INIT_TIMEOUT:-120}
      PLUGIN_MAX_EXECUTION_TIMEOUT: ${PLUGIN_MAX_EXECUTION_TIMEOUT:-600}
      PLUGIN_STORAGE_TYPE: ${PLUGIN_STORAGE_TYPE:-local}
      PLUGIN_STORAGE_LOCAL_ROOT: ${PLUGIN_STORAGE_LOCAL_ROOT:-/app/storage}
      PLUGIN_INSTALLED_PATH: ${PLUGIN_INSTALLED_PATH:-plugin}
      PLUGIN_PACKAGE_CACHE_PATH: ${PLUGIN_PACKAGE_CACHE_PATH:-plugin_packages}
      PLUGIN_MEDIA_CACHE_PATH: ${PLUGIN_MEDIA_CACHE_PATH:-assets}
    ports:
      - "${EXPOSE_PLUGIN_DEBUGGING_PORT:-5003}:${PLUGIN_DEBUGGING_PORT:-5003}"
    volumes:
      - ./volumes/plugin_daemon:/app/storage
    depends_on:
      db:
        condition: service_healthy
    networks:
      - default
      - traefik_network

  qdrant:
    image: langgenius/qdrant:v1.7.3
    profiles:
      - qdrant
    restart: always
    volumes:
      - ./volumes/qdrant:/qdrant/storage
    environment:
      QDRANT_API_KEY: ${QDRANT_API_KEY:-difyai123456}

networks:
  default:
  traefik_network:
    external: true
  ssrf_proxy_network:
    driver: bridge
    internal: true
